code quality has 2 metrics, maintainability, and efficiency <- efficiency is the focus of DS and Algorithms

reading data using an index takes 1 step.

Practice questions: 
1. For an array containing 100 elements, provide the number of steps the
following operations would take:
a. Reading
    1 step. reading with a given index only takes 1 step
b. Searching for a value not contained within the array
    100 steps. the computer has to look through every address in the array to know it does not contain the value
c. Insertion at the beginning of the array
    101 steps. the computer moves the 100 items forward 1 address(100 steps), then inserts the value in the first, now empty address.(1 step)
d. Insertion at the end of the array
    1 step. the computer adds a new address and inserts the value. feels like 2 steps, but according to the book its 1.
e. Deletion at the beginning of the array
    100 steps. the computer deletes the value in the first address (1), then moves the 99 other items down (99). 
f. Deletion at the end of the array
    1 step. delete the value, then update the length of array. again, feels like 2 steps.

2. For an array-based set containing 100 elements, provide the number of
steps the following operations would take:
a. Reading
    1 step
b. Searching for a value not contained within the array
    100 steps
c. Insertion of a new value at the beginning of the set
    100 + 100 + 1 = 201. the computer searches every index (100), then moves all the values by 1 address(100), then inserts the address(1).
d. Insertion of a new value at the end of the set
    101
e. Deletion at the beginning of the set
    100
f. Deletion at the end of the set
    1
3. Normally the search operation in an array looks for the first instance of
a given value. But sometimes we may want to look for every instance of
a given value. For example, say we want to count how many times the
value “apple” is found inside an array. How many steps would it take to
find all the “apples”? Give your answer in terms of N.
    it would take N steps, since it has to iterate through every address.


Ordered lists are in order. shocker.
Linear search - search through every address/index until the value is found
Binary search - search through an ordered array by looking at the middle value of the search space, then eliminating
    half of the space via a high/low comparison. repeat until the space is a single value, or the middle is the value.

As N increases, the number of steps needed to search the ordered lists
    linear search - increases linearly
    binary search - increases logarithmically

Big O Notation
"Steps" in big O notation typically include:
    arithmatic operations,
    variable assignments
    comparison operations
    function calls
    accessing elements in an array
If there are N data elements, how many steps will the algorithm take?
O(N)
The soul of O - Ignore coefficients, pretty much. Think of the most significant part of the growth rate.
    Think limits. if it goes to infinity, who wins in the end?
Look at the best case scenario and the worst case scenario
O(logN) <- base 2
Increases by 1 step every time the data is doubled

find the complexity of the functions in big O notation
1. Function to see if a year is a leap year
    O(1)
2. Function to sum all the values in an array
    O(N)
3. Function to see how many times you need to double the number 1 to exceed the number N
    O(logN) <- base 2
4. Find all the strings in the array that starts with the letter 'a'
    O(N)
5. function to calculate the median from an ordered array
    O(1)


Sorting
Bubble sort - Compare 2 numbers, swap them if theyre in the wrong order. Move the next pair.
    repeat when you reach the end of the list. finish when an iteration finds no swaps.
    Has the complexity of O(N^2)

Exercises - 
    1. For N = [100, 2000], what are the steps of the complexity O(N), O(logN), O(N^2)
        [100, 2000], [6, 11], [10000, 4000000] 
    2. O(N^2) has 256 steps. whats the size?
        sqrt(256)= 16
    3. What is the time complexity of the function?
        O(N^2)
    4. rewrite the O(N^2) function to be O(N)
        def getGreatestNumber(array):
            largest = array[0]
            for item in array:
                if item > largest:
                    largest = item        
            return largest

Optimizing code with and without big O

some algoriths have the same O notation complexity, but is faster than one another

selection sort is about twice as fast as bubble sort, both being O(N^2) complexity
Big O ignores constants. It categorizes generally in terms of speed.
Within the same category, then constants matter and the analysis into it begins.

Exercises - 
    1. Use Big O to describe the time complexity of 4N + 16
        O(N)
    2. Use Big O to describe the time complexity of 2N^2
        O(N^2)
    3. Use Big O to describe the time complexity of the following function (not shown)
        O(N)
    4. Use Big O to describe the time complexity of the following function (not shown)
        O(N)
    5. Use Big O to describe the time complexity of the following function (not shown)
        O(N^2)

Optimizing for optimistic Scenarios

its good to look at the worst case scenario, but its best to consider all scenarios
Big O ignores not only constants, but only cares about the highest order of N
N^3 + N -> N^3
The best case scenario is whent the data is already in order
The average scenario is the most probable scenario, where half of the data is in the wrong order

Different algorithms have different speeds in each scenario, and selecting the best one depends 
on the data, and what you expect.

Selection Sort
    Best case:      N^2 / 2
    Average case:   N^2 / 2
    Worst case:     N^2 / 2
Insertion Sort
    Best case:      N
    Average case:   N^2 / 2
    Worst case:     N^2

If the data is nearly sorted, insertion is the way to go. If its nearly reverse, then selection. At random, both are equal

consider if youre looking for the intersection of 2 arrays, meaning the values they have in common.
you loop over all elements on arr1, each looping over each element in arr2, N^2 complexity
if theres a value match, add it to result array
Its N^2 complexity no matter what, even if the two arrays are identical
if you add a break in the function when a match is found, then the best case becomes O(N)

Exercises:
    1. Use big O notation to describe the efficiency of the algorithm 3N^2, + 2N + 1
        O(N^2)
    2. Use big O notation to describe the efficiency of the algorithm N + log(N)
        O(N)
    3. Use big O notation to describe the best, worst, and average case scenatio for the function (not shown)
        Best: O(1), Average: O(N^2), Worst: O(N^2)
    4. What is the time complexity of the function? (not shown) Rewrite it to improve its average and best case scenario
        O(N)
        def containsX(string):
            for char in string:
                if char == "X":
                    return True
            return False

Big O in Everyday Code
Determining how fast our current code is, is the first step in optimizing it

Consider the cases:
    adding all the even numbers.
    The worst case, all numbers are even.
    step 1 read, step 2, check if even, step 3 add
    O(3N) or O(N)

    building every 2 letter combination of characters i.e. [a,b,c] -> [aa, ab, ac, ba, bb, bc, ca, cb, cc]
    two internal loops
    O(N^2)

    building every 3 letter combination of characters
    3 internal loops
    O(N^3)

    *Every higher order of N is much slower. Its a big gap between N^2 and N^3

    Taking the first, middle, and last element of an array
    O(1)

    reading average temperatures in celsius and fahrenheit
    loops through all the thermometer temperatures twice, O(2N)

    Clothing labels
    loop through each clothing item and give it a size 1 thru 5, O(5N)

    Count 1's in a 2d array. its in a nested loop, but its not N^2, its O(N)

    Palindrome detector. start and beginning and end and meet in the middle, comparing if the characters are the same
    O(N/2) or O(N)

    Getting the product of all combinations in an array. O(N^2)

    Getting the product of all combinations from 2 arrays. 
    *If there are two datasets use M*
    O(N*M)
    But how do we compare it? 
    Imagine if M is 1, then it would be O(N). If M is equal to N, then O(N^2)
    O(N*M) is a range between O(N) and O(N^2)

    Password Cracker, brute force just characters
    O(26^N) -> Very slow
    Any algorithm where N is the exponent is bad

Exercises:
    1. Use big O Notation to determine the time complexity of a "100 sum array"
        A 100 sum array is where the pairs of the first and last, 2nd first and 2nd last, 3rd first and 3rd last, etc. sum to 100
        O(N/2) -> O(N)

    2. Use Big O Notation to determine the time complexity of the merge array function. 
        O(M+N) -> O(N) Worst case is 2N and big O ignores constants -> checked it and its correct
    
    3. Use Big O Notation to determine the time complexity of the "Needle in a Haystack" algorithm
        O(N*M)

    3. Use Big O Notation to determine the time complexity of finding the largest product of 3 numbers in an array
        O(N^3)
    
    4. 3. Use Big O Notation to determine the time complexity of tossing out half the resumes until a single one is left.
        O(LogN)

Blazing Fast Lookups with Hash Tables
